#include <stdio.h>

#define MAX 5  // Defining the maximum size of the queue

// Queue structure
struct Queue {
    int arr[MAX];
    int front;
    int rear;
};

// Function to initialize the queue
void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is empty
int is Empty(struct Queue* q) {
    if (q->front == -1) {
        return 1;
    }
    return 0;
}

// Check if the queue is full
int isFull(struct Queue* q) {
    if (q->rear == MAX - 1) {
        return 1;
    }
    return 0;
}

// Enqueue operation - adding an element to the queue
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue.\n");
    } else {
        if (q->front == -1) {
            q->front = 0;  // If the queue was empty, set front to 0
        }
        q->rear++;
        q->arr[q->rear] = value;
        printf("Enqueued: %d\n", value);
    }
}

// Dequeue operation - removing an element from the front of the queue
void dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
    } else {
        printf("Dequeued: %d\n", q->arr[q->front]);
        q->front++;

        // If the queue becomes empty, reset the pointers
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
}

// Display the current elements in the queue
void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
    } else {
        printf("Queue contents: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->arr[i]);
        }
        printf("\n");
    }
}

// Main function to demonstrate the queue operations
int main() {
    struct Queue q;
    initQueue(&q);  // Initialize the queue

    // Enqueue operations
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    // Display the queue after enqueuing
    display(&q);

    // Trying to enqueue when the queue is full
    enqueue(&q, 60);

    // Dequeue operations
    dequeue(&q);
    dequeue(&q);

    // Display the queue after dequeuing
    display(&q);

    // Dequeue operation on an empty queue
    dequeue(&q);
    dequeue(&q);
    dequeue(&q);
    dequeue(&q);

    // Display the queue after all dequeues
    display(&q);

    return 0;
}
